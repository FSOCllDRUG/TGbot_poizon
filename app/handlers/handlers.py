import logging

from aiogram import Router, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InputMediaPhoto  # , FSInputFile

from app.keyboards import keyboards as kb
from app.modules.convert import convert_price as cvrt
from app.modules.convert import get_data

router = Router()


class Order(StatesGroup):
    photo_id = State()
    link = State()
    price = State()


class FinalOrder:
    def __init__(self):
        self.photo_id = []
        self.link = []
        self.priceCNY = []
        self.priceBYN = []

    def clear(self):
        self.photo_id.clear()
        self.link.clear()
        self.priceCNY.clear()
        self.priceBYN.clear()

    def remove_item(self, item_number):
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.photo_id.pop(item_number)
        self.link.pop(item_number)
        self.priceCNY.pop(item_number)
        self.priceBYN.pop(item_number)


class RemId(StatesGroup):
    item_id = State()


user_orders = {}


class OrderForm(StatesGroup):
    photo_id = State()
    link = State()
    price = State()


class Converting(StatesGroup):
    yuan_amount = State()


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ /start
@router.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer(text=f"<b>üîé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML,
                         reply_markup=kb.main)


@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏èÔ∏èÔ∏è')
async def cmd_start(message: Message):
    order = user_orders.get(message.from_user.id, FinalOrder())
    if order is not None:
        order.clear()
    await message.answer(text=f"<b>üîé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML,
                         reply_markup=kb.main)


@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚¨ÖÔ∏èÔ∏èÔ∏è')
async def back_in_menu(message: Message):
    await message.answer(text=f"<b>üîé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML,
                         reply_markup=kb.main)


@router.message(F.text == 'üõí –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞')
async def shops(message: Message):
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n‚ùóÔ∏è<i>–ù–∞ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ </i>'
                              f'<i>–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ</i>', parse_mode=ParseMode.HTML)
    await message.answer(text=f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                              f'<b>¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ '
                              '—É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π¬ª</b>', parse_mode=ParseMode.HTML)
    await message.answer(text=f'<i>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - –Ω–∞—à '
                              f'–º–µ–Ω–µ–¥–∂–µ—Ä —Å '
                              '—Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ—Ç</i>\nüëâ@stuffmarketmanager', parse_mode=ParseMode.HTML,
                         reply_markup=kb.shops)


@router.message(F.text == 'üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
async def contact_manager(message: Message):
    await message.answer(
        text=f'–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É\nüëâ @stuffmarketmanager\n\n<i>–¢–∞–∫–∂–µ –æ–Ω –º–æ–∂–µ—Ç '
             f'–ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç '
             f'—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ </i>',
        parse_mode=ParseMode.HTML)


@router.message(F.text == '‚ùì–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
async def contact_manager(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –º–µ–Ω—é.',
                         reply_markup=kb.faq)


@router.message(F.text == '–ö—Ç–æ –º—ã?')
async def faq_who(message: Message):
    await message.answer(
        '–ú—ã —è–≤–ª—è–µ–º—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –≤ —Ä–∞–±–æ—Ç–µ —Å –ö–∏—Ç–∞–µ–º. –ß–µ—Ä–µ–∑ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Ç–æ–≤–∞—Ä, —Å –ª—é–±–æ–≥–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ '
        '—Å–∞–π—Ç–∞ üá®üá≥')


@router.message(F.text == '–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å—á—ë—Ç?')
async def faq_price_calc(message: Message):
    await message.answer('–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1¬• = 0.53BYN\n–¢.–µ. —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ ¬• ‚Ä¢ 0.53BYN = —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π '
                         '–ø–æ–∑–∏—Ü–∏–∏ –≤ BYN\n\n+ 5% –∫–æ–º–∏—Å—Å–∏—è –≤—ã–∫—É–ø–∞ (–æ–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞, —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ '
                         '–ö–∏—Ç–∞—é)')


@router.message(F.text == '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?')
async def faq_price_delivery(message: Message):
    await message.answer('–ó–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ '
                         '–ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –∫ –Ω–∞–º\n\n–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:\n–ê–≤–∏–∞-–¥–æ—Å—Ç–∞–≤–∫–∞ (20-30 –¥–Ω–µ–π –¥–æ –ë–µ–ª–∞—Ä—É—Å–∏) - '
                         '10$/–∫–≥\n–ê–≤—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞ (40-50 –¥–Ω–µ–π –¥–æ –ë–µ–ª–∞—Ä—É—Å–∏) - –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚è≥\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–∞–∫–∞–∑ '
                         '–≤–∑–≤–µ—à–∏–≤–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —É–ø–∞–∫–æ–≤–∫–æ–π, –≤ –∫–æ—Ç–æ—Ä—É—é —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç –∫–∏—Ç–∞–π—Å–∫–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏')


@router.message(F.text == '–ö–∞–∫ —É–∑–Ω–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä?')
async def faq_size(message: Message):
    await message.answer('–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–∂–¥–æ–º—É –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º '
                         '–ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞, –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å—Ä–∞–∑—É –ø–∏—à–∏—Ç–µ –µ–º—É üëâ '
                         '@stuffmarketmanager')


@router.message(F.text == 'üìå –û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π')
async def contact_manager(message: Message):
    await message.answer('–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –ø–∏—à—É—Ç –æ –Ω–∞—Å –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã', reply_markup=kb.otzivi)


@router.message(F.text == 'üì± –ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏')
async def contacts(message: Message):
    await message.answer('–ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏:', reply_markup=kb.socials)


@router.message(F.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π')
async def instruction(message: Message):
    await message.answer(
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞ '
        '–ø–æ–º–æ—â—å—é üëâ @stuffmarketmanager', reply_markup=kb.main)


@router.message(F.text == 'üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
@router.message(F.text.casefold() == "üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=kb.main,
    )


@router.message(Converting.yuan_amount, F.text.isdigit() == True)
async def converting(message: Message, state: FSMContext) -> None:
    await state.update_data(yuan_amount=message.text)
    x = int(message.text)
    byn_rate = cvrt(x)
    data = get_data()
    avia_price = data['avia']
    avto_price = data['avto']
    await message.answer(
        f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞= {byn_rate:.2f} BYN\n–¶–µ–Ω–∞ –∞–≤—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ 1 –∫–≥= {avto_price:.0f} $\n–¶–µ–Ω–∞ "
        f"–∞–≤–∏–∞-–¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ 1 –∫–≥= {avia_price:.0f} $", reply_markup=kb.inshop)
    await state.clear()


@router.message(Converting.yuan_amount)
async def incorrect_input_rasschet(message: Message) -> None:
    await message.reply(
        text="–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É(—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)"
    )


@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥', reply_markup=kb.catalog)


@router.callback_query(F.data == 'adidas')
async def cb_adidas(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—Ä–µ–Ω–¥')
    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {callback.data}')


@router.callback_query(F.data == 'nike')
async def cb_adidas(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—Ä–µ–Ω–¥', show_alert=True)
    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {callback.data}')


@router.message(F.video)
async def cmd_get_video_id(message: Message):
    await message.answer(message.video.file_id)


# Poizon
@router.message(F.text == 'Poizon')
async def MGPoizon(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö(¬•)\n'
                              '<i>‚ùóÔ∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ '
                              '—á–∏—Å–ª–æ</i>', parse_mode="HTML", reply_markup=kb.inshop_back)
    media = [
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICRWUr1hgkiFedWNhRvy1_XOqOlio2AAJRzzEbC0VgSV39HkLjH8KAAQADAgADeQADMAQ',
                        caption='1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ <b>Poizon</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É\n'
                                '2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–≤–æ–π',
                        parse_mode=ParseMode.HTML),
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICR2Ur1h-7-Zv7kwsIyuGh7qa69GBVAAJSzzEbC0VgSRmaM9d8YOtYAQADAgADeQADMAQ')

    ]
    await message.answer_media_group(media=media)
    await state.set_state(Converting.yuan_amount)
    # await state.clear()


# Taobao
@router.message(F.text == 'Taobao')
async def MGTaobao(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö(¬•)\n'
                              '<i>‚ùóÔ∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ '
                              '—á–∏—Å–ª–æ</i>', parse_mode="HTML", reply_markup=kb.inshop_back)
    media = [
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICSWUr1ik8MDLMv-sp4GqxTA6uYz0lAAJYzzEbC0VgST83L4RIXXNGAQADAgADeQADMAQ',
                        caption='1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ <b>Taobao</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É\n'
                                '2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º '
                                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤–µ—Ä—Ö—É',
                        parse_mode=ParseMode.HTML),
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICS2Ur1jfq17flEjLqRlC7fe_-zYxQAAJZzzEbC0VgSR1_rmZUM5QjAQADAgADeQADMAQ')

    ]
    await message.answer_media_group(media=media)
    await state.set_state(Converting.yuan_amount)


# 1688
@router.message(F.text == '1688')
async def MG1688(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö(¬•)\n'
                              '<i>‚ùóÔ∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ '
                              '—á–∏—Å–ª–æ</i>', parse_mode="HTML", reply_markup=kb.inshop_back)
    media = [
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICTWUr1kHh6NovpXnH0bXhAxRt100PAAJbzzEbC0VgSZP4DgOTl1gmAQADAgADeQADMAQ',
                        caption='1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ <b>1688</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É (–æ–±—Ä–∞—â–∞–π—Ç–µ '
                                '–≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n'
                                '2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º '
                                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–Ω–∏–∑—É'),
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICT2Ur1kZAw_RmEu8GLQAB9nOsGJqPhAACXM8xGwtFYEk_IATFQY1w7wEAAwIAA3kAAzAE')

    ]
    await message.answer_media_group(media=media)
    await state.set_state(Converting.yuan_amount)


# Pinduoduo
@router.message(F.text == 'Pinduoduo')
async def MGPinduoduo(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö(¬•)\n'
                              '<i>‚ùóÔ∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ '
                              '—á–∏—Å–ª–æ</i>', parse_mode="HTML", reply_markup=kb.inshop_back)
    media = [
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICVWUr1nKAI8FKSCStIsAQMgOJe9MiAAJnzDEbTVxhSXm_4FIqXoIRAQADAgADdwADMAQ',
                        caption=' 1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ <b>Pinduoduo</b>. –í –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞ —Å–Ω–∏–∑—É 2 –∫–Ω–æ–ø–∫–∏ (üîµ - '
                                '–æ–¥–∏–Ω–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞, üü¢ - –ø–∞—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞)\n'
                                '2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º '
                                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤–µ—Ä—Ö—É'),
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICV2Ur1nJVLYKDu0sv5ZPZo5MhZrwfAAJozDEbTVxhSUyDMx4dbjUuAQADAgADdwADMAQ')

    ]
    await message.answer_media_group(media=media)
    await state.set_state(Converting.yuan_amount)


# 95
@router.message(F.text == '95')
async def MG95(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö(¬•)\n'
                              '<i>‚ùóÔ∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ '
                              '—á–∏—Å–ª–æ</i>', parse_mode="HTML", reply_markup=kb.inshop_back)
    media = [
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICWmUr1sgd6MNEeCz1Wi2cWfX7tMAtAAK20DEbC0VgSTxc7Fvw8TqdAQADAgADdwADMAQ',
                        caption='1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ–≤–∞—Ä –Ω–∞ <b>95</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–≤–µ–¥—ë–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É\n'
                                '2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–∞ –∑–µ–ª—ë–Ω–æ–π –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É'),
        InputMediaPhoto(type='photo',
                        media='AgACAgIAAxkBAAICWWUr1sc7bmf5x41W7kduoO-a3z7-AAK10DEbC0VgSUJYref0ncrtAQADAgADdwADMAQ')

    ]
    await message.answer_media_group(media=media)
    await state.set_state(Converting.yuan_amount)


# –î—Ä—É–≥–∞—è –ø–ª–æ—â–∞–¥–∫–∞
@router.message(F.text == '–î—Ä—É–≥–∞—è –ø–ª–æ—â–∞–¥–∫–∞')
async def AnotherMarketplace(message: Message):
    await message.answer(text='<b>–î–ª—è –∑–∞–∫–∞–∑–∞ —Å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø–ª–æ—â–∞–¥–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\nüë®‚Äçüíª '
                              '@stuffmarketmanager', parse_mode="HTML", reply_markup=kb.main)


@router.message(F.text == ' –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π')
async def howto_install(message: Message):
    await message.answer(
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ '
        '–º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é\nüëâ @stuffmarketmanager')


#
# # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
# @router.message(F.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üìù')
# @router.message(F.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä')
# async def CreateOrder(message: Message, state: FSMContext):
#     await message.answer(
#         text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.go_back
#     )
#     await state.set_state(OrderForm.photo_id)
#
#
# @router.message(OrderForm.photo_id, F.photo)
# async def Price(message: Message, state: FSMContext):
#     await state.update_data(photo_id=message.photo[-1].file_id)
#     await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')
#     await state.set_state(OrderForm.link)
#
#
# @router.message(OrderForm.link)
# async def Photo(message: Message, state: FSMContext):
#     await state.update_data(link=message.text)
#     await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö')
#     await state.set_state(OrderForm.price)
#
#
# @router.message(OrderForm.price)
# async def Summary(message: Message, state: FSMContext):
#     await state.update_data(price=message.text)
#     user_data = await state.get_data()
#     x = float(user_data["price"])
#     byn_rate = await cvrt(x / 10 * 1.05, 'CNY')
#     await message.answer_photo(str(user_data["photo_id"]),
#                                caption=f'–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: \n {user_data["link"]} \n–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:\n'
#                                        f' {user_data["price"]}¬•= {byn_rate:.2f}BYN', reply_markup=kb.order)
#     await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É üëâ @stuffmarketmanager')
#     if message.from_user.id != 5559094874:
#         await message.bot.send_photo(photo=str(user_data["photo_id"]),
#                                      caption=f'–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {user_data["link"]} \n–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:'
#                                              f' {user_data["price"]}¬• = '
#                                              f'{byn_rate:.2f}BYN\n–ó–∞–∫–∞–∑ –æ—Ç: '
#                                              f'@{message.from_user.username}',
#                                      chat_id=5559094874)
#
# @router.callback_query(F.data == 'add_to_order')
@router.message(F.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üìù')
async def CreateOrder(message: Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.go_back
    )
    await state.set_state(Order.photo_id)


@router.callback_query(F.data == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def CreateOrder(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.go_back
    )
    await callback.answer()
    await state.set_state(Order.photo_id)


@router.message(Order.photo_id, F.photo)
async def Link(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä')
    await state.set_state(Order.link)


@router.message(Order.link)
async def Price(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö')
    await state.set_state(Order.price)


@router.message(Order.price, F.text.isdigit() == True)
async def Summary1(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    user_data = await state.get_data()
    x = float(user_data["price"])
    byn_rate = cvrt(x)

    # –ü–æ–ª—É—á–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä FinalOrder –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π
    order = user_orders.get(message.from_user.id, FinalOrder())

    order.link.append(user_data["link"])
    order.priceCNY.append(user_data["price"])
    order.photo_id.append(user_data["photo_id"])
    order.priceBYN.append(byn_rate)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    user_orders[message.from_user.id] = order
    await state.clear()
    await message.answer('–í–∞—à –∑–∞–∫–∞–∑:', reply_markup=types.ReplyKeyboardRemove())
    if len(order.photo_id) == 1:
        await message.answer_photo(
            photo=order.photo_id[0],
            caption=f'üõí –¢–æ–≤–∞—Ä–æ–≤: 1\n 1. {order.link[0]} | '
                    f'{order.priceBYN[-1]:.2f} BYN\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: '
                    f'{order.priceBYN[-1]:.2f} BYN\n\n üöõ –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã '
                    f'–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π-–ë–µ–ª–∞—Ä—É—Å—å + –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã –¥–æ –≤–∞—Å'
        )
        await message.answer('–î–µ–π—Å—Ç–≤–∏—è:', reply_markup=kb.FinalOrder)
    else:
        caption = f'üõí –¢–æ–≤–∞—Ä–æ–≤: {len(order.photo_id)}\n'
        for i in range(len(order.photo_id)):
            caption += f'{i + 1}. {order.link[i]} | {order.priceBYN[i]:.2f} BYN\n'
        caption += (f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {sum(order.priceBYN):.2f} BYN\n\n üöõ –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã '
                    f'–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π-–ë–µ–ª–∞—Ä—É—Å—å + –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã –¥–æ –≤–∞—Å')
        media = [
            InputMediaPhoto(type='photo',
                            media=order.photo_id[0],
                            caption=caption)
        ]
        for i in range(1, len(order.photo_id)):
            media.append(InputMediaPhoto(type='photo', media=order.photo_id[i]))
        await message.answer_media_group(media)
        await message.answer('–î–µ–π—Å—Ç–≤–∏—è:', reply_markup=kb.FinalOrder)


@router.callback_query(F.data == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def remID(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å')
    await state.set_state(RemId.item_id)


@router.message(RemId.item_id, F.text.isdigit() == True)
async def rm_remID(message: Message, state: FSMContext):
    await state.update_data(item_id=message.text)
    user_data = await state.get_data()
    x = int(user_data["item_id"]) - 1
    order = user_orders.get(message.from_user.id, FinalOrder())
    order.remove_item(x)
    # # –ü–æ–ª—É—á–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä FinalOrder –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π
    # order = user_orders.get(message.from_user.id, FinalOrder())
    # # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    # user_orders[message.from_user.id] = order
    if len(order.photo_id) == 1:
        await message.answer('–í–∞—à –∑–∞–∫–∞–∑:', reply_markup=types.ReplyKeyboardRemove())
        if len(order.photo_id) == 1:
            await message.answer_photo(
                photo=order.photo_id[0],
                caption=f'üõí –¢–æ–≤–∞—Ä–æ–≤: 1\n 1. {order.link[0]} | '
                        f'{order.priceBYN[-1]:.2f} BYN\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: '
                        f'{order.priceBYN[-1]:.2f} BYN\n\n üöõ –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã '
                        f'–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π-–ë–µ–ª–∞—Ä—É—Å—å + –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã –¥–æ –≤–∞—Å'
            )
            await message.answer('–î–µ–π—Å—Ç–≤–∏—è:', reply_markup=kb.FinalOrder)

        else:
            caption = f'üõí –¢–æ–≤–∞—Ä–æ–≤: {len(order.photo_id)}\n'
            for i in range(len(order.photo_id)):
                caption += f'{i + 1}. {order.link[i]} | {order.priceBYN[i]:.2f} BYN\n'
            caption += (f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {sum(order.priceBYN):.2f} BYN\n\n üöõ –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã '
                        f'–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π-–ë–µ–ª–∞—Ä—É—Å—å + –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã –¥–æ –≤–∞—Å')
            media = [
                InputMediaPhoto(type='photo',
                                media=order.photo_id[0],
                                caption=caption)
            ]
            for i in range(1, len(order.photo_id)):
                media.append(InputMediaPhoto(type='photo', media=order.photo_id[i]))
            await message.answer_media_group(media)
            await message.answer('–î–µ–π—Å—Ç–≤–∏—è:', reply_markup=kb.FinalOrder)
    else:
        await message.answer('–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.', reply_markup=kb.main)



@router.callback_query(F.data == '–ú–µ–Ω–µ–¥–∂–µ—Ä, –ª–æ–≤–∏ –∞–ø—Ç–µ—á–∫—É')
async def order_to_manager(callback: CallbackQuery):
    await callback.answer()
    # –ü–æ–ª—É—á–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä FinalOrder –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π
    order = user_orders.get(callback.from_user.id, FinalOrder())
    if len(order.photo_id) != 0:
        await callback.message.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n–° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        if callback.from_user.id != 5559094874:
            if len(order.photo_id) == 1:
                await callback.bot.send_photo(
                    photo=order.photo_id[0],
                    caption=f'üõí –¢–æ–≤–∞—Ä–æ–≤: 1\n 1. {order.link[0]} | '
                            f'{order.priceBYN[-1]:.2f} BYN\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: '
                            f'{order.priceBYN[-1]:.2f} BYN\n\n–ó–∞–∫–∞–∑ –æ—Ç: '
                            f'@{callback.from_user.username}', chat_id=6092344340
                )
            else:
                caption = f'üõí –¢–æ–≤–∞—Ä–æ–≤: {len(order.photo_id)}\n'
                for i in range(len(order.photo_id)):
                    caption += f'{i + 1}. {order.link[i]} | {order.priceBYN[i]:.2f} BYN\n'
                caption += (f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {sum(order.priceBYN):.2f} BYN\n\n–ó–∞–∫–∞–∑ –æ—Ç: '
                            f'@{callback.from_user.username}')
                media = [
                    InputMediaPhoto(type='photo',
                                    media=order.photo_id[0],
                                    caption=caption)
                ]
                for i in range(1, len(order.photo_id)):
                    media.append(InputMediaPhoto(type='photo', media=order.photo_id[i]))
                await callback.bot.send_media_group(media=media, chat_id=6092344340)
        order = user_orders.get(callback.from_user.id, FinalOrder())
        order.clear()
        if callback.from_user.username is None:
            await callback.message.answer(
                '–£ –≤–∞—Å –Ω–µ—Ç userID, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É üëâ@stuffmarketmanager')
    else:
        await callback.message.answer('–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.', reply_markup=kb.main)


@router.callback_query(F.data == '–ì–∞–ª—è, –Ω–µ—Å–∏ –∫–ª—é—á, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞')
async def order_to_manager(callback: CallbackQuery):
    await callback.answer()
    order = user_orders.get(callback.from_user.id, FinalOrder())
    order.clear()
    await callback.message.answer('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.\n\n–í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',reply_markup=kb.main)


@router.message(Order.price)
async def incorrect_input(message: Message):
    await message.reply(
        text="–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É(—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)"
    )


@router.message(Order.photo_id)
async def incorrect_input(message: Message):
    await message.reply(
        text="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ"
    )


# –•—ç–Ω–¥–ª–µ—Ä –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–æ—à–ª–æ
# –Ω–∏ –ø–æ–¥ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä
@router.message()
async def echo(message: Message):
    await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é\n–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.main)
